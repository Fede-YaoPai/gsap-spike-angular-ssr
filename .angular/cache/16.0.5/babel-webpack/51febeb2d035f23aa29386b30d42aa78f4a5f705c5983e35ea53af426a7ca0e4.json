{"ast":null,"code":"import 'zone.js/node';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { ngExpressEngine } from '@nguniversal/express-engine';\nimport * as express from 'express';\nimport { existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { AppServerModule } from './src/main.server';\n// The Express app is exported so that it can be used by serverless Functions.\nexport function app() {\n  const server = express();\n  const distFolder = join(process.cwd(), 'dist/angular.io-example/browser');\n  const indexHtml = existsSync(join(distFolder, 'index.original.html')) ? 'index.original.html' : 'index';\n  // Our Universal express-engine (found @ https://github.com/angular/universal/tree/main/modules/express-engine)\n  server.engine('html', ngExpressEngine({\n    bootstrap: AppServerModule\n  }));\n  server.set('view engine', 'html');\n  server.set('views', distFolder);\n  // Example Express Rest API endpoints\n  // server.get('/api/**', (req, res) => { });\n  // Serve static files from /browser\n  server.get('*.*', express.static(distFolder, {\n    maxAge: '1y'\n  }));\n  // All regular routes use the Universal engine\n  server.get('*', (req, res) => {\n    res.render(indexHtml, {\n      req,\n      providers: [{\n        provide: APP_BASE_HREF,\n        useValue: req.baseUrl\n      }]\n    });\n  });\n  return server;\n}\nfunction run() {\n  const port = process.env['PORT'] || 4000;\n  // Start up the Node server\n  const server = app();\n  server.listen(port, () => {\n    console.log(`Node Express server listening on http://localhost:${port}`);\n  });\n}\nconst mainModule = __non_webpack_require__.main;\nconst moduleFilename = mainModule && mainModule.filename || '';\nif (moduleFilename === __filename || moduleFilename.includes('iisnode')) {\n  run();\n}\nexport * from './src/main.server';","map":{"version":3,"names":["APP_BASE_HREF","ngExpressEngine","express","existsSync","join","AppServerModule","app","server","distFolder","process","cwd","indexHtml","engine","bootstrap","set","get","static","maxAge","req","res","render","providers","provide","useValue","baseUrl","run","port","env","listen","console","log","mainModule","__non_webpack_require__","main","moduleFilename","filename","__filename","includes"],"sources":["C:\\Users\\feder\\OneDrive\\Desktop\\federico_lecca\\follyway\\spikes\\gsap-spike-angular-ssr\\server.ts"],"sourcesContent":["import 'zone.js/node';\n\nimport { APP_BASE_HREF } from '@angular/common';\nimport { ngExpressEngine } from '@nguniversal/express-engine';\nimport * as express from 'express';\nimport { existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { AppServerModule } from './src/main.server';\n\n// The Express app is exported so that it can be used by serverless Functions.\nexport function app(): express.Express {\n  const server = express();\n  const distFolder = join(process.cwd(), 'dist/angular.io-example/browser');\n  const indexHtml = existsSync(join(distFolder, 'index.original.html')) ? 'index.original.html' : 'index';\n\n  // Our Universal express-engine (found @ https://github.com/angular/universal/tree/main/modules/express-engine)\n  server.engine('html', ngExpressEngine({\n    bootstrap: AppServerModule\n  }));\n\n  server.set('view engine', 'html');\n  server.set('views', distFolder);\n\n  // Example Express Rest API endpoints\n  // server.get('/api/**', (req, res) => { });\n  // Serve static files from /browser\n  server.get('*.*', express.static(distFolder, {\n    maxAge: '1y'\n  }));\n\n  // All regular routes use the Universal engine\n  server.get('*', (req, res) => {\n    res.render(indexHtml, { req, providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }] });\n  });\n\n  return server;\n}\n\nfunction run(): void {\n  const port = process.env['PORT'] || 4000;\n\n  // Start up the Node server\n  const server = app();\n  server.listen(port, () => {\n    console.log(`Node Express server listening on http://localhost:${port}`);\n  });\n}\n\n// Webpack will replace 'require' with '__webpack_require__'\n// '__non_webpack_require__' is a proxy to Node 'require'\n// The below code is to ensure that the server is run only when not requiring the bundle.\ndeclare const __non_webpack_require__: NodeRequire;\nconst mainModule = __non_webpack_require__.main;\nconst moduleFilename = mainModule && mainModule.filename || '';\nif (moduleFilename === __filename || moduleFilename.includes('iisnode')) {\n  run();\n}\n\nexport * from './src/main.server';"],"mappings":"AAAA,OAAO,cAAc;AAErB,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAO,KAAKC,OAAO,MAAM,SAAS;AAClC,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;AACA,OAAM,SAAUC,GAAGA,CAAA;EACjB,MAAMC,MAAM,GAAGL,OAAO,EAAE;EACxB,MAAMM,UAAU,GAAGJ,IAAI,CAACK,OAAO,CAACC,GAAG,EAAE,EAAE,iCAAiC,CAAC;EACzE,MAAMC,SAAS,GAAGR,UAAU,CAACC,IAAI,CAACI,UAAU,EAAE,qBAAqB,CAAC,CAAC,GAAG,qBAAqB,GAAG,OAAO;EAEvG;EACAD,MAAM,CAACK,MAAM,CAAC,MAAM,EAAEX,eAAe,CAAC;IACpCY,SAAS,EAAER;GACZ,CAAC,CAAC;EAEHE,MAAM,CAACO,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;EACjCP,MAAM,CAACO,GAAG,CAAC,OAAO,EAAEN,UAAU,CAAC;EAE/B;EACA;EACA;EACAD,MAAM,CAACQ,GAAG,CAAC,KAAK,EAAEb,OAAO,CAACc,MAAM,CAACR,UAAU,EAAE;IAC3CS,MAAM,EAAE;GACT,CAAC,CAAC;EAEH;EACAV,MAAM,CAACQ,GAAG,CAAC,GAAG,EAAE,CAACG,GAAG,EAAEC,GAAG,KAAI;IAC3BA,GAAG,CAACC,MAAM,CAACT,SAAS,EAAE;MAAEO,GAAG;MAAEG,SAAS,EAAE,CAAC;QAAEC,OAAO,EAAEtB,aAAa;QAAEuB,QAAQ,EAAEL,GAAG,CAACM;MAAO,CAAE;IAAC,CAAE,CAAC;EAChG,CAAC,CAAC;EAEF,OAAOjB,MAAM;AACf;AAEA,SAASkB,GAAGA,CAAA;EACV,MAAMC,IAAI,GAAGjB,OAAO,CAACkB,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI;EAExC;EACA,MAAMpB,MAAM,GAAGD,GAAG,EAAE;EACpBC,MAAM,CAACqB,MAAM,CAACF,IAAI,EAAE,MAAK;IACvBG,OAAO,CAACC,GAAG,CAAC,qDAAqDJ,IAAI,EAAE,CAAC;EAC1E,CAAC,CAAC;AACJ;AAMA,MAAMK,UAAU,GAAGC,uBAAuB,CAACC,IAAI;AAC/C,MAAMC,cAAc,GAAGH,UAAU,IAAIA,UAAU,CAACI,QAAQ,IAAI,EAAE;AAC9D,IAAID,cAAc,KAAKE,UAAU,IAAIF,cAAc,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE;EACvEZ,GAAG,EAAE;;AAGP,cAAc,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}